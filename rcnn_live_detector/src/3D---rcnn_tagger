/*
  Created on: june 1, 2017
 *      Author: jcarlos2289

*/

#include "ros/ros.h"
#include "std_msgs/String.h"
#include <stdlib.h>
#include "rcnn_live_detector/Prediction.h"
#include "rcnn_live_detector/PredictionsList.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include "ros/package.h"
#include <geometry_msgs/Point.h>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>
#include <sensor_msgs/Image.h>
//#include <pcl_ros/point_cloud.h>
//#include <pcl/point_types.h>
#include <sensor_msgs/PointCloud2.h>
//#include <pcl/ModelCoefficients.h>
/*#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/features/normal_3d.h>
#include <pcl/kdtree/kdtree.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl/common/centroid.h>
#include <pcl/common/common.h>
#include <pcl/common/transforms.h>*/
#include <limits>
//#include <pcl/conversions.h>
#include <image_transport/image_transport.h>
#include <opencv/cv.h>
#include <image_geometry/pinhole_camera_model.h>
#include <tf/transform_listener.h>
#include <boost/foreach.hpp>
#include <sensor_msgs/image_encodings.h>

ros::Subscriber tag_sub;
ros::Publisher cluster_pub_;
ros::Publisher centinel_pub_;
ros::Subscriber rgbdimage_sub_;
boost::shared_ptr<ros::NodeHandle> nh_ptr_;
//sensor_msgs::CameraInfo camInfo;
ros::Subscriber camera_sub;

//pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
//sensor_msgs::PointCloud2 originalCloud;

const std::string RECEIVE_IMG_TOPIC_NAME = "/cv_camera/image_raw_th";

//receive the tags, confidence and bbox for the image
void tag_cb(rcnn_live_detector::PredictionsList input)
{
  cluster_pub_.publish(input);
  ROS_INFO("Message received from /tags");
}

void rgbdImageCallback(const sensor_msgs::ImageConstPtr &in_image)
{
  rgbdimage_sub_.shutdown();
  ROS_INFO("Received Image.");
  cv_bridge::CvImageConstPtr imgOriginal = cv_bridge::toCvShare(in_image, sensor_msgs::image_encodings::BGR8);
  cv::imwrite("/home/jcarlos2289/catkin_ws/results/rcnn_live_detector/imgToTag.jpg", imgOriginal->image);
  std::stringstream sl;
  sl << "Beggin Classification" << std::endl;
  std_msgs::String msg;
  msg.data = sl.str();
  centinel_pub_.publish(msg);
}

void connectCallback(const ros::SingleSubscriberPublisher &pub)
{
  std::cout << "New subscriber linked" << std::endl;
  if (cluster_pub_.getNumSubscribers() == 1)
  {
    // Subscribe to camera
    rgbdimage_sub_ = nh_ptr_->subscribe<sensor_msgs::Image>(RECEIVE_IMG_TOPIC_NAME, 1, rgbdImageCallback); //1  /camera/cloud/points ??
    ROS_INFO("New Subcriber\nWaiting for a image to Starting predictions stream.");
  }
}

void disconnectCallback(const ros::SingleSubscriberPublisher &pub)
{
  if (cluster_pub_.getNumSubscribers() == 0)
  {
    // Unsubscribe to camera
    //  rgbdimage_sub_.shutdown ();
    ROS_INFO("Stopping predictions stream.");
  }
}

int main(int argc, char **argv)
{

  ros::init(argc, argv, "rcnn_tagger");

  nh_ptr_ = boost::make_shared<ros::NodeHandle>();

  //this will publish the msg for the reader/visualzer node
  cluster_pub_ = nh_ptr_->advertise<rcnn_live_detector::PredictionsList>("/cluster_data_topic", 1, connectCallback, disconnectCallback);

  //this receive the msg with the bounding box and the identified labels
  tag_sub = nh_ptr_->subscribe("/identified_tags", 1, tag_cb);

  //this will send the order to beggin with the classification
  centinel_pub_ = nh_ptr_->advertise<std_msgs::String>("/centinel", 1);
  ros::spin();

  return 0;
}